services:
  # Serviço da Aplicação Web (Flask)
  screensaver_service:
    build: ./screensaver_mng
    container_name: screensaver
    restart: unless-stopped
    # Nenhuma porta exposta ao host. A comunicação é interna via Nginx.
    # ports:
      # Mapeia a porta 5000 do container para a porta 5000 do host
      # - "5000:5000"
    # Equivalente a --ipc=host
    ipc: host

    # Equivalente a --device=/dev/...
    # Usamos uma lista para mapear múltiplos dispositivos.
    devices:
      # - "/dev/fb0:/dev/fb0"
      - "/dev/tty0:/dev/tty0"
      - "/dev/input:/dev/input"

    # Equivalente a -v /caminho/host:/caminho/container
    # Mapeia o diretório do seu script screensaver para dentro do container.
    volumes:
      - "./screensaver_mng/screensaver_files:/app/screensaver_files"

    # (Opcional) Equivalente a --privileged
    # Descomente esta linha APENAS para troubleshooting, se o resto não funcionar.
    privileged: true
    networks:
      - web-net

  # Serviço de Gerenciamento do Minecraft
  minecraft_service:
    # Se você quiser construir a imagem localmente, descomente a linha abaixo
    build: ./minecraft_mng
    # Se você já publicou a imagem no Docker Hub, comente a linha de "build" e use a linha "image" abaixo
    # Aponta para a imagem que você publicou no Docker Hub
    # image: 'seu-usuario-docker'/minecraft_mng:latest
    container_name: minecraft
    restart: always
    volumes:
      # Mapeia os scripts para dentro do contêiner
      - ./minecraft_mng/terraform:/app/terraform
      - ./minecraft_mng/ansible:/app/ansible
      # Mapeia sua chave SSH para o Ansible poder usar
      - ~/.ssh/id_rsa:/root/.ssh/id_rsa:ro
      # Mapeia o arquivo de segredos do Vault para dentro do contêiner
      # Você deve criar o 'secrets.yml' na pasta 'minecraft_mng/ansible/' da sua máquina local
      - ./minecraft_mng/ansible/secrets.yml:/app/ansible/secrets.yml:ro
      # Mapeia a chave pública para o Terraform
      - ~/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub:ro
    environment:
      # Forma segura de passar a senha do Vault.
      # Crie um arquivo .env na raiz do projeto e adicione a linha:
      # ANSIBLE_VAULT_PASSWORD=sua_senha_super_secreta
      - ANSIBLE_VAULT_PASSWORD=${ANSIBLE_VAULT_PASSWORD}
      # Passa as credenciais da AWS para o Terraform e o cliente AWS
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    networks:
      - web-net

  # Serviço do Nginx (Reverse Proxy)
  nginx:
    build: ./nginx
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      # Mapeia as portas do host para as portas do container Nginx
      - "80:80"
      - "443:443"
      - "8000:8000"
    volumes:
      # Mapeia o seu arquivo de configuração principal
      - ./nginx/conf.d/nginx.conf:/etc/nginx/conf.d/default.conf
      # Mapeia o snippet com as configurações comuns
      - ./nginx/snippets/common.conf:/etc/nginx/snippets/common.conf
      - ./nginx/snippets/ssl.conf:/etc/nginx/snippets/ssl.conf
      # Mapeia o diretório de certificados SSL
      - ./nginx/certs:/etc/nginx/certs:ro
      # Mapeia o diretório de logs do Nginx
      - ./nginx/logs:/var/log/nginx
      # Mapeia o diretório de html do Nginx
      - ./nginx/html:/usr/share/nginx/html
      # Mapeia o diretório de imagens do Nginx
      - ./nginx/images:/usr/share/nginx/images
    networks:
      - web-net
    depends_on:
      # - screensaver_service # Garante que o Nginx só inicie após a aplicação web
      - minecraft_service # Garante que o Nginx só inicie após o serviço Minecraft
    # Se você usar variáveis de ambiente no template, adicione a seção 'environment' aqui.
    environment:
      - SERVER_NAME=${NGINX_SERVER_NAME} # Altere para o IP do seu servidor ou domínio

networks:
  web-net:
    driver: bridge

