services:
  # Serviço da Aplicação Web (Flask)
  webapp:
    build: ./app
    container_name: flask_app
    restart: unless-stopped
    networks:
      - web-net
    # Nenhuma porta exposta ao host. A comunicação é interna via Nginx.

  # Serviço do Nginx (Reverse Proxy)
  nginx:
    build: ./nginx
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      # Mapeia as portas do host para as portas do container Nginx
      - "80:80"
      - "443:443"
      - "8000:8000"
    volumes:
      # Mapeia o seu arquivo de configuração principal
      - ./nginx/conf.d/nginx.conf:/etc/nginx/conf.d/default.conf
      # Mapeia o snippet com as configurações comuns
      - ./nginx/snippets/common.conf:/etc/nginx/snippets/common.conf
      - ./nginx/snippets/ssl.conf:/etc/nginx/snippets/ssl.conf
      # Mapeia o diretório de certificados SSL
      - ./nginx/certs:/etc/nginx/certs:ro
      # Mapeia o diretório de logs do Nginx
      - ./nginx/logs:/var/log/nginx
      # Mapeia o diretório de html do Nginx
      - ./nginx/html:/usr/share/nginx/html
      # Mapeia o diretório de imagens do Nginx
      - ./nginx/images:/usr/share/nginx/images
    networks:
      - web-net
    depends_on:
      - webapp # Garante que o Nginx só inicie após a aplicação web
    # Se você usar variáveis de ambiente no template, adicione a seção 'environment' aqui.
    environment:
      - SERVER_NAME=192.168.15.4 # Altere para o IP do seu servidor ou domínio

# Nota sobre Minecraft: Se você quiser adicionar um servidor Minecraft,
# você adicionaria um novo serviço aqui e mapearia a porta:
#
# minecraft-server:
#   image: itzg/minecraft-server
#   container_name: minecraft
#   restart: unless-stopped
#   ports:
#     - "25565:25565"
#   environment:
#     EULA: "TRUE"
#   volumes:
#     - ./minecraft-data:/data
#   networks:
#     - web-net

networks:
  web-net:
    driver: bridge

